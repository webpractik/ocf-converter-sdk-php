<?php
/**
 * FileStatusDto
 * PHP version 7.4
 *
 * @category Class
 * @package  Webpractik\OcfConverter\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * tasker
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webpractik\OcfConverter\Sdk\Model;

use \ArrayAccess;
use \Webpractik\OcfConverter\Sdk\ObjectSerializer;

/**
 * FileStatusDto Class Doc Comment
 *
 * @category Class
 * @package  Webpractik\OcfConverter\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FileStatusDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'FileStatusDto';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'cONVERTEDSIZE' => 'float',
        'cONVERTEDFILE' => 'string',
        'tIMECONVERTED' => 'string',
        'tIMEADD'       => 'string',
        'sTATUS'        => 'string',
        'aUTHOR'        => 'float',
        'iDFILE'        => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'cONVERTEDSIZE' => null,
        'cONVERTEDFILE' => null,
        'tIMECONVERTED' => null,
        'tIMEADD'       => null,
        'sTATUS'        => null,
        'aUTHOR'        => null,
        'iDFILE'        => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        'cONVERTEDSIZE' => false,
        'cONVERTEDFILE' => false,
        'tIMECONVERTED' => false,
        'tIMEADD'       => false,
        'sTATUS'        => false,
        'aUTHOR'        => false,
        'iDFILE'        => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cONVERTEDSIZE' => 'CONVERTED_SIZE',
        'cONVERTEDFILE' => 'CONVERTED_FILE',
        'tIMECONVERTED' => 'TIME_CONVERTED',
        'tIMEADD'       => 'TIME_ADD',
        'sTATUS'        => 'STATUS',
        'aUTHOR'        => 'AUTHOR',
        'iDFILE'        => 'ID_FILE',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cONVERTEDSIZE' => 'setCONVERTEDSIZE',
        'cONVERTEDFILE' => 'setCONVERTEDFILE',
        'tIMECONVERTED' => 'setTIMECONVERTED',
        'tIMEADD'       => 'setTIMEADD',
        'sTATUS'        => 'setSTATUS',
        'aUTHOR'        => 'setAUTHOR',
        'iDFILE'        => 'setIDFILE',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cONVERTEDSIZE' => 'getCONVERTEDSIZE',
        'cONVERTEDFILE' => 'getCONVERTEDFILE',
        'tIMECONVERTED' => 'getTIMECONVERTED',
        'tIMEADD'       => 'getTIMEADD',
        'sTATUS'        => 'getSTATUS',
        'aUTHOR'        => 'getAUTHOR',
        'iDFILE'        => 'getIDFILE',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cONVERTEDSIZE', $data ?? [], null);
        $this->setIfExists('cONVERTEDFILE', $data ?? [], null);
        $this->setIfExists('tIMECONVERTED', $data ?? [], null);
        $this->setIfExists('tIMEADD', $data ?? [], null);
        $this->setIfExists('sTATUS', $data ?? [], null);
        $this->setIfExists('aUTHOR', $data ?? [], null);
        $this->setIfExists('iDFILE', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cONVERTEDSIZE'] === null) {
            $invalidProperties[] = "'cONVERTEDSIZE' can't be null";
        }
        if ($this->container['cONVERTEDFILE'] === null) {
            $invalidProperties[] = "'cONVERTEDFILE' can't be null";
        }
        if ($this->container['tIMECONVERTED'] === null) {
            $invalidProperties[] = "'tIMECONVERTED' can't be null";
        }
        if ($this->container['tIMEADD'] === null) {
            $invalidProperties[] = "'tIMEADD' can't be null";
        }
        if ($this->container['sTATUS'] === null) {
            $invalidProperties[] = "'sTATUS' can't be null";
        }
        if ($this->container['aUTHOR'] === null) {
            $invalidProperties[] = "'aUTHOR' can't be null";
        }
        if ($this->container['iDFILE'] === null) {
            $invalidProperties[] = "'iDFILE' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets cONVERTEDSIZE
     *
     * @return float
     */
    public function getCONVERTEDSIZE()
    {
        return $this->container['cONVERTEDSIZE'];
    }

    /**
     * Sets cONVERTEDSIZE
     *
     * @param float $cONVERTEDSIZE File size
     *
     * @return self
     */
    public function setCONVERTEDSIZE($cONVERTEDSIZE)
    {
        if (is_null($cONVERTEDSIZE)) {
            throw new \InvalidArgumentException('non-nullable cONVERTEDSIZE cannot be null');
        }

        $this->container['cONVERTEDSIZE'] = $cONVERTEDSIZE;

        return $this;
    }

    /**
     * Gets cONVERTEDFILE
     *
     * @return string
     */
    public function getCONVERTEDFILE()
    {
        return $this->container['cONVERTEDFILE'];
    }

    /**
     * Sets cONVERTEDFILE
     *
     * @param string $cONVERTEDFILE File path
     *
     * @return self
     */
    public function setCONVERTEDFILE($cONVERTEDFILE)
    {
        if (is_null($cONVERTEDFILE)) {
            throw new \InvalidArgumentException('non-nullable cONVERTEDFILE cannot be null');
        }

        $this->container['cONVERTEDFILE'] = $cONVERTEDFILE;

        return $this;
    }

    /**
     * Gets tIMECONVERTED
     *
     * @return string
     */
    public function getTIMECONVERTED()
    {
        return $this->container['tIMECONVERTED'];
    }

    /**
     * Sets tIMECONVERTED
     *
     * @param string $tIMECONVERTED File convert time
     *
     * @return self
     */
    public function setTIMECONVERTED($tIMECONVERTED)
    {
        if (is_null($tIMECONVERTED)) {
            throw new \InvalidArgumentException('non-nullable tIMECONVERTED cannot be null');
        }

        $this->container['tIMECONVERTED'] = $tIMECONVERTED;

        return $this;
    }

    /**
     * Gets tIMEADD
     *
     * @return string
     */
    public function getTIMEADD()
    {
        return $this->container['tIMEADD'];
    }

    /**
     * Sets tIMEADD
     *
     * @param string $tIMEADD File added time
     *
     * @return self
     */
    public function setTIMEADD($tIMEADD)
    {
        if (is_null($tIMEADD)) {
            throw new \InvalidArgumentException('non-nullable tIMEADD cannot be null');
        }

        $this->container['tIMEADD'] = $tIMEADD;

        return $this;
    }

    /**
     * Gets sTATUS
     *
     * @return string
     */
    public function getSTATUS()
    {
        return $this->container['sTATUS'];
    }

    /**
     * Sets sTATUS
     *
     * @param string $sTATUS File status
     *
     * @return self
     */
    public function setSTATUS($sTATUS)
    {
        if (is_null($sTATUS)) {
            throw new \InvalidArgumentException('non-nullable sTATUS cannot be null');
        }

        $this->container['sTATUS'] = $sTATUS;

        return $this;
    }

    /**
     * Gets aUTHOR
     *
     * @return float
     */
    public function getAUTHOR()
    {
        return $this->container['aUTHOR'];
    }

    /**
     * Sets aUTHOR
     *
     * @param float $aUTHOR File author id
     *
     * @return self
     */
    public function setAUTHOR($aUTHOR)
    {
        if (is_null($aUTHOR)) {
            throw new \InvalidArgumentException('non-nullable aUTHOR cannot be null');
        }

        $this->container['aUTHOR'] = $aUTHOR;

        return $this;
    }

    /**
     * Gets iDFILE
     *
     * @return string
     */
    public function getIDFILE()
    {
        return $this->container['iDFILE'];
    }

    /**
     * Sets iDFILE
     *
     * @param string $iDFILE File id
     *
     * @return self
     */
    public function setIDFILE($iDFILE)
    {
        if (is_null($iDFILE)) {
            throw new \InvalidArgumentException('non-nullable iDFILE cannot be null');
        }

        $this->container['iDFILE'] = $iDFILE;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


